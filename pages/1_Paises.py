import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# üìå Cargar los datos desde el archivo Excel
def cargar_datos():
    file_path = "Desembolsos_Acum_Max.xlsx"  # Aseg√∫rate de que el archivo est√© en la misma carpeta
    try:
        df = pd.read_excel(file_path, sheet_name='Sheet1')
        df = df[['Pais', 'Categoria Desembolso', 'A√±os', 'Porcentaje Acumulado']].dropna()
        return df
    except FileNotFoundError:
        st.error("‚ùå No se encontr√≥ `Desembolsos_Acum_Max.xlsx`. Verifica que est√© en la carpeta correcta.")
        return pd.DataFrame()

# üìå Funci√≥n para realizar la regresi√≥n y graficar resultados
def realizar_regresion(df_filtro, pais_seleccionado, categoria_seleccionada):
    X = df_filtro[['A√±os']].values
    y = df_filtro['Porcentaje Acumulado'].values

    if len(X) < 2:
        st.warning("‚ö† No hay suficientes datos para calcular la regresi√≥n.")
        return

    # üìå Aplicar regresi√≥n lineal
    modelo = LinearRegression()
    modelo.fit(X, y)
    y_pred = modelo.predict(X)
    r2 = r2_score(y, y_pred)

    # üìå Mostrar el coeficiente R¬≤
    st.write(f"### üìå Coeficiente de determinaci√≥n R¬≤: `{r2:.2f}`")

    # üìå Crear gr√°fico en Matplotlib
    fig, ax = plt.subplots(figsize=(8, 5))
    ax.scatter(X, y, color='blue', label="Datos Reales")
    ax.plot(X, y_pred, color='red', linestyle="--", label="Regresi√≥n Lineal")
    ax.set_xlabel("A√±os")
    ax.set_ylabel("Porcentaje Acumulado")
    ax.set_title(f"Regresi√≥n Lineal para {pais_seleccionado} - {categoria_seleccionada}")
    ax.legend()
    
    # üìå Mostrar gr√°fico
    st.pyplot(fig)

# üìå Funci√≥n principal de la p√°gina
def app():
    st.title("üìä An√°lisis de Regresi√≥n: Porcentaje Acumulado por A√±os")

    # üìå Cargar datos
    df = cargar_datos()
    if df.empty:
        return

    # üìå Selector de pa√≠s dentro de la app
    paises = sorted(df['Pais'].unique())
    pais_seleccionado = st.selectbox("üåç Selecciona un pa√≠s:", paises)

    # üìå Filtrar las categor√≠as de desembolso seg√∫n el pa√≠s seleccionado
    categorias_disponibles = df[df['Pais'] == pais_seleccionado]['Categoria Desembolso'].unique()

    if len(categorias_disponibles) == 0:
        st.warning(f"‚ö† No hay categor√≠as de desembolso disponibles para {pais_seleccionado}.")
        return

    categoria_seleccionada = st.selectbox("üìä Selecciona una categor√≠a de desembolso:", sorted(categorias_disponibles))

    # üìå Filtrar datos por pa√≠s y categor√≠a de desembolso
    df_filtro = df[(df['Pais'] == pais_seleccionado) & (df['Categoria Desembolso'] == categoria_seleccionada)]

    if df_filtro.empty:
        st.warning(f"‚ö† No hay datos disponibles para {pais_seleccionado} - {categoria_seleccionada}.")
        return

    # üìå Ejecutar la regresi√≥n y graficar resultados
    realizar_regresion(df_filtro, pais_seleccionado, categoria_seleccionada)

# üìå Ejecutar la app si se llama directamente
if __name__ == "__main__":
    app()


